// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Exceed2GoCounterKey uint32

const (
	Exceed2GoCounterKeyIPV6PACKET            Exceed2GoCounterKey = 0
	Exceed2GoCounterKeyTO_TARGET             Exceed2GoCounterKey = 1
	Exceed2GoCounterKeyHOP_FOUND             Exceed2GoCounterKey = 2
	Exceed2GoCounterKeyICMP_PACKET           Exceed2GoCounterKey = 3
	Exceed2GoCounterKeyICMP_ECHO_REQUEST     Exceed2GoCounterKey = 4
	Exceed2GoCounterKeyICMP_CORRECT_CHECKSUM Exceed2GoCounterKey = 5
	Exceed2GoCounterKeyCOUNTER_MAX_ENTRIES   Exceed2GoCounterKey = 6
)

type Exceed2GoIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

// LoadExceed2Go returns the embedded CollectionSpec for Exceed2Go.
func LoadExceed2Go() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Exceed2GoBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Exceed2Go: %w", err)
	}

	return spec, err
}

// LoadExceed2GoObjects loads Exceed2Go and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Exceed2GoObjects
//	*Exceed2GoPrograms
//	*Exceed2GoMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadExceed2GoObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadExceed2Go()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Exceed2GoSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Exceed2GoSpecs struct {
	Exceed2GoProgramSpecs
	Exceed2GoMapSpecs
}

// Exceed2GoSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Exceed2GoProgramSpecs struct {
	Exceed2goTc  *ebpf.ProgramSpec `ebpf:"exceed2go_tc"`
	Exceed2goXdp *ebpf.ProgramSpec `ebpf:"exceed2go_xdp"`
}

// Exceed2GoMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Exceed2GoMapSpecs struct {
	Exceed2goAddrs    *ebpf.MapSpec `ebpf:"exceed2go_addrs"`
	Exceed2goCounters *ebpf.MapSpec `ebpf:"exceed2go_counters"`
}

// Exceed2GoObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadExceed2GoObjects or ebpf.CollectionSpec.LoadAndAssign.
type Exceed2GoObjects struct {
	Exceed2GoPrograms
	Exceed2GoMaps
}

func (o *Exceed2GoObjects) Close() error {
	return _Exceed2GoClose(
		&o.Exceed2GoPrograms,
		&o.Exceed2GoMaps,
	)
}

// Exceed2GoMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadExceed2GoObjects or ebpf.CollectionSpec.LoadAndAssign.
type Exceed2GoMaps struct {
	Exceed2goAddrs    *ebpf.Map `ebpf:"exceed2go_addrs"`
	Exceed2goCounters *ebpf.Map `ebpf:"exceed2go_counters"`
}

func (m *Exceed2GoMaps) Close() error {
	return _Exceed2GoClose(
		m.Exceed2goAddrs,
		m.Exceed2goCounters,
	)
}

// Exceed2GoPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadExceed2GoObjects or ebpf.CollectionSpec.LoadAndAssign.
type Exceed2GoPrograms struct {
	Exceed2goTc  *ebpf.Program `ebpf:"exceed2go_tc"`
	Exceed2goXdp *ebpf.Program `ebpf:"exceed2go_xdp"`
}

func (p *Exceed2GoPrograms) Close() error {
	return _Exceed2GoClose(
		p.Exceed2goTc,
		p.Exceed2goXdp,
	)
}

func _Exceed2GoClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed exceed2go_bpfel.o
var _Exceed2GoBytes []byte
