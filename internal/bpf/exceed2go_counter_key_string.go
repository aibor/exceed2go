// Code generated by "stringer -type Exceed2GoCounterKey -trimprefix Exceed2GoCounterKeyCOUNTER_ -output exceed2go_counter_key_string.go exceed2go_bpfel.go"; DO NOT EDIT.

package bpf

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Exceed2GoCounterKeyCOUNTER_IPV6PACKET-0]
	_ = x[Exceed2GoCounterKeyCOUNTER_TO_TARGET-1]
	_ = x[Exceed2GoCounterKeyCOUNTER_ICMP_PACKET-2]
	_ = x[Exceed2GoCounterKeyCOUNTER_ICMP_ECHO_REQUEST-3]
	_ = x[Exceed2GoCounterKeyCOUNTER_ICMP_CORRECT_CHECKSUM-4]
	_ = x[Exceed2GoCounterKeyCOUNTER_PKT_UNRELATED-5]
	_ = x[Exceed2GoCounterKeyCOUNTER_PKT_HOP_FOUND-6]
	_ = x[Exceed2GoCounterKeyCOUNTER_PKT_ECHO_REQUEST-7]
	_ = x[Exceed2GoCounterKeyCOUNTER_DO_REDIRECT-8]
	_ = x[Exceed2GoCounterKeyCOUNTER_MAX_ENTRIES-9]
}

const _Exceed2GoCounterKey_name = "IPV6PACKETTO_TARGETICMP_PACKETICMP_ECHO_REQUESTICMP_CORRECT_CHECKSUMPKT_UNRELATEDPKT_HOP_FOUNDPKT_ECHO_REQUESTDO_REDIRECTMAX_ENTRIES"

var _Exceed2GoCounterKey_index = [...]uint8{0, 10, 19, 30, 47, 68, 81, 94, 110, 121, 132}

func (i Exceed2GoCounterKey) String() string {
	if i >= Exceed2GoCounterKey(len(_Exceed2GoCounterKey_index)-1) {
		return "Exceed2GoCounterKey(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Exceed2GoCounterKey_name[_Exceed2GoCounterKey_index[i]:_Exceed2GoCounterKey_index[i+1]]
}
